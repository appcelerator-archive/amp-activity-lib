{
  "version": 3,
  "sources": [
    "../src/Activity.js"
  ],
  "names": [],
  "mappings": ";;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEe,MAAM,QAAN,CAAe;AAC5B,SAAa,WAAb,CAAyB,IAAzB,EAA+B;AAAA;AAC7B,UAAI,WAAW,IAAI,QAAJ,EAAf;AACA,eAAS,IAAT,GAAgB,IAAhB;AACA,eAAS,EAAT,GAAc,MAAM,kBAApB;AACA,aAAO,QAAP;AAJ6B;AAK9B;;AAED,SAAa,MAAb,CAAoB,EAApB,EAAwB;AAAA;AACtB,UAAI,WAAW,IAAI,QAAJ,EAAf;AACA,eAAS,EAAT,GAAc,EAAd;;;;;;;;AAQA,aAAO,QAAP;AAVsB;AAWvB;;AAED,gBAAc;AACZ,SAAK,IAAL,GAAY,EAAZ;AACA,SAAK,MAAL,GAAc,0BAAd;AACD;;AAEK,MAAN,CAAW,IAAX,EAAiB;AAAA;;AAAA;AACf,YAAK,IAAL,GAAY,kBAAM,MAAK,IAAX,EAAiB,QAAQ,EAAzB,CAAZ;AACA,YAAM,MAAK,KAAL,CAAW,MAAK,EAAhB,EAAoB;AACxB,cAAM,MAAK,IADa;AAExB,eAAO,MAAK,KAFY;AAGxB,cAAM,MAAK;AAHa,OAApB,CAAN;AAFe;AAOhB;;AAEK,WAAN,CAAgB,KAAhB,EAAuB,IAAvB,EAA6B;AAAA;;AAAA;AAC3B,aAAK,KAAL,GAAa,KAAb;AACA,aAAO,MAAM,OAAK,KAAL,CAAW,IAAX,CAAb;AAF2B;AAG5B;;AAEK,OAAN,CAAY,EAAZ,EAAgB,KAAhB,EAAuB;AAAA;;AAAA;;AAErB,YAAM,OAAK,MAAL,CAAY,GAAZ,CAAgB,EAAhB,EAAoB,KAAK,SAAL,CAAe,KAAf,CAApB,CAAN;AAFqB;AAGtB;AA3C2B;;kBAAT,Q;AA8CrB,SAAS,gBAAT,GAA4B;AAC1B,SAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAqB;AACtC,QAAI;;AAEF,cAAQ,eAAK,EAAL,EAAR;AACD,KAHD,CAGE,OAAO,GAAP,EAAY;AACZ,aAAO,GAAP;AACD;AACF,GAPM,CAAP;AAQD",
  "file": "Activity.js",
  "sourcesContent": [
    "import { Consul } from 'amp-consul-lib'\nimport { merge } from 'ramda'\nimport uuid from 'uuid'\n\nexport default class Activity {\n  static async newActivity(name) {\n    let activity = new Activity()\n    activity.name = name\n    activity.id = await getNewActivityID()\n    return activity\n  }\n\n  static async fromID(id) {\n    let activity = new Activity()\n    activity.id = id\n\n    // TODO implement\n    /*\n    let { state, name } = await getActivity(id)\n    activity.state = state\n    activity.name = name\n    */\n    return activity\n  }\n\n  constructor() {\n    this.data = {}\n    this.consul = new Consul()\n  }\n\n  async save(data) {\n    this.data = merge(this.data, data || {})\n    await this._save(this.id, {\n      name: this.name,\n      state: this.state,\n      data: this.data\n    })\n  }\n\n  async saveState(state, data) {\n    this.state = state\n    return await this._save(data)\n  }\n\n  async _save(id, value) {\n    // TODO: spec key-value space schema\n    await this.consul.set(id, JSON.stringify(value))\n  }\n}\n\nfunction getNewActivityID() {\n  return new Promise((resolve, reject) => {\n    try {\n      // TODO this will be replaced by a flake id\n      resolve(uuid.v1())\n    } catch (err) {\n      reject(err)\n    }\n  })\n}\n"
  ]
}